package de.uol.swp.client.register;

import com.google.common.base.Strings;
import com.google.common.eventbus.EventBus;
import com.google.inject.Inject;

import de.uol.swp.client.AbstractPresenter;
import de.uol.swp.client.register.event.RegistrationCanceledEvent;
import de.uol.swp.client.register.event.RegistrationErrorEvent;
import de.uol.swp.client.user.ClientUserService;
import de.uol.swp.common.user.UserDTO;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;

/**
 * Manages the registration window
 *
 * @author Marco Grawunder
 * @see de.uol.swp.client.AbstractPresenter
 * @since 2019-08-29
 */
public class RegistrationPresenter extends AbstractPresenter {

    public static final String FXML = "/fxml/RegistrationView.fxml";

    private static final RegistrationCanceledEvent registrationCanceledEvent =
            new RegistrationCanceledEvent();

    @FXML private TextField loginField;

    @FXML private PasswordField passwordField1;

    @FXML private PasswordField passwordField2;

    /**
     * Default Constructor
     *
     * @since 2019-09-18
     */
    public RegistrationPresenter() {}

    /**
     * Constructor
     *
     * @param eventBus The EventBus set in ClientModule
     * @param userService The injected ClientUserService
     * @see de.uol.swp.client.di.ClientModule
     * @since 2019-09-18
     */
    @Inject
    public RegistrationPresenter(EventBus eventBus, ClientUserService userService) {
        setEventBus(eventBus);
    }

    /**
     * Method called when the cancel button is pressed
     *
     * <p>This Method is called when the cancel button is pressed. It posts an instance of the
     * RegistrationCanceledEvent to the EventBus the SceneManager is subscribed to.
     *
     * @param event The ActionEvent generated by pressing the register button
     * @see de.uol.swp.client.register.event.RegistrationCanceledEvent
     * @see de.uol.swp.client.SceneManager
     * @since 2019-09-02
     */
    @FXML
    void onCancelButtonPressed(ActionEvent event) {
        eventBus.post(registrationCanceledEvent);
    }

    /**
     * Method called when the register button is pressed
     *
     * <p>This Method is called when the register button is pressed. It posts an instance of the
     * RegistrationErrorEvent to the EventBus the SceneManager is subscribed to, if one of the
     * fields is empty or the password fields are not equal. If everything is filled in correctly
     * the user service is requested to create a new user.
     *
     * @param event The ActionEvent generated by pressing the register button
     * @see de.uol.swp.client.register.event.RegistrationErrorEvent
     * @see de.uol.swp.client.SceneManager
     * @see de.uol.swp.client.user.UserService
     * @since 2019-09-02
     */
    @FXML
    void onRegisterButtonPressed(ActionEvent event) {
        if (Strings.isNullOrEmpty(loginField.getText())) {
            eventBus.post(new RegistrationErrorEvent("Username cannot be empty"));
        } else if (!passwordField1.getText().equals(passwordField2.getText())) {
            eventBus.post(new RegistrationErrorEvent("Passwords are not equal"));
        } else if (Strings.isNullOrEmpty(passwordField1.getText())) {
            eventBus.post(new RegistrationErrorEvent("Password cannot be empty"));
        } else {
            userService.createUser(
                    new UserDTO(loginField.getText(), passwordField1.getText(), "empty"));
        }
    }
}
